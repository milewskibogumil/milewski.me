---
const splitLetters = (text: string) => {
  return text
    .split('')
    .map((letter, index) =>
      letter === ' ' ? '&nbsp;' : `<span style="transition-delay: ${index * 8}ms">${letter}</span>`
    )
    .join('');
};

type Props = {
  href: string;
  theme: 'primary' | 'secondary';
};

const { href, theme } = Astro.props;

const children = await Astro.slots.render('default');
---

<a href={href} class={`cta cta_${theme}`}>
  <div class="container">
    <div set:html={splitLetters(children)} />
    <div set:html={splitLetters(children)} aria-hidden="true" />
  </div>
</a>

<style lang="scss">
  :global(.cta-wrapper) {
    display: inline-flex;
    flex-wrap: wrap;
    align-items: center;
    gap: 0.75rem;
    width: fit-content;
    .cta {
      flex: 1 1 auto;
    }
  }
  .cta {
    display: inline-flex;
    padding: 14px 28px;
    border-radius: 28px;
    font-size: 15px;
    transition: background-color 100ms ease;
    &_primary {
      background-color: var(--primary-600);
      color: var(--secondary-300);
      &:hover {
        background-color: var(--primary-700);
      }
    }
    &_secondary {
      border: 1px solid var(--primary-600);
      color: var(--primary-600);
      &:hover {
        background-color: rgba(var(--primary-600-rgb), 0.05);
      }
    }
    .container {
      height: 1.75em;
      overflow: hidden;
    }
    @media (prefers-reduced-motion: no-preference) {
      &:hover,
      &:focus-visible {
        :global(span) {
          transform: translateY(-100%);
        }
      }
    }
    :global(span) {
      transition: transform 500ms cubic-bezier(0.19, 1, 0.22, 1);
      display: inline-block;
    }
  }
</style>
